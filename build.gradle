import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    id 'application'
    id 'org.beryx.jlink' version '2.23.1'
}

sourceSets.main {
    java {
        srcDir 'src'
    }
    resources {
        srcDir 'src'
        exclude "**/*.java"
    }
}

sourceSets.test {
    java {
        srcDir 'test'
    }
}

repositories {
    mavenCentral()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(14)
    }
    modularity.inferModulePath.set(true)
}

def javaFXPlatform = getJavaFXPlatform()
def javaFXVersion = "11.0.2"

dependencies {
    // you need a dependency for each of the JavaFX modules you're going to use
    implementation "org.openjfx:javafx-base:${javaFXVersion}:${javaFXPlatform}"
    implementation "org.openjfx:javafx-controls:${javaFXVersion}:${javaFXPlatform}"
    implementation "org.openjfx:javafx-graphics:${javaFXVersion}:${javaFXPlatform}"
    implementation "org.openjfx:javafx-fxml:${javaFXVersion}:${javaFXPlatform}"

    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:3.0.0'
    implementation 'com.sun.xml.bind:jaxb-impl:3.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testImplementation 'org.mockito:mockito-inline:3.9.0'
    testImplementation 'org.loadui:testFx:3.1.2'
    testImplementation 'org.testfx:testfx-junit:4.0.15-alpha'
    testImplementation 'org.testfx:testfx-junit:4.0.15-alpha'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

application {
    mainModule.set('pump.main')
    mainClass.set('main.Pump')
}
version '3'

test {
    useJUnitPlatform()
}

jlink {
    launcher {
        name = 'pump'
    }
    jpackage {
        installerType = 'deb'
        installerOptions = ['--linux-shortcut', '--resource-dir', 'build/jpackage/pump/lib']
        imageOptions = ['--icon', 'pump.png']
    }
}

// Based on this StackOverflow answer: https://stackoverflow.com/a/65209664/653519
private static String getJavaFXPlatform() {
    def currentOS = DefaultNativePlatform.currentOperatingSystem
    if (currentOS.isWindows()) {
        return 'win'
    } else if (currentOS.isLinux()) {
        return 'linux'
    } else if (currentOS.isMacOsX()) {
        return 'mac'
    }
    return null
}
